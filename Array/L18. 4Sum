Question:
Given an array nums of n integers, return an array of all the unique quadruplets 
[nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order. 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109

Solution:
Approach: Fix two values and then for the next two use two pointers.

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        sort(nums.begin(),nums.end());
        long long sum=0;
        vector<vector<int>> res;
        //vector<int> temp;
        int k=0;
        int l=0;
        int n=nums.size();

        for(int i=0;i<nums.size();i++)
        {  
          //check for duplicates
           if(i>0&&nums[i]==nums[i-1])
           continue;

           for(int j=i+1;j<nums.size();j++)
           {
            //check for duplicates
            if(j>i+1&& nums[j]==nums[j-1])
            continue;

            k=j+1;
            l=n-1;

            while(k<l)
            {
                sum=(long)nums[i]+nums[j]+nums[k]+nums[l];

                if(sum==target)
                {
                    //temp.push_back(i);
                    //temp.push_back(j);
                    //temp.push_back(k);
                    //temp.push_back(l);
                    res.push_back({nums[i],nums[j],nums[k],nums[l]});
                    k++;
                    l--;

                    //check for duplicates
                    while (k < l && nums[k] == nums[k - 1]) k++;
                    while (k < l && nums[l] == nums[l + 1]) l--;
                }
                else if(sum<target)
                {
                    k++;
                }
                else
                {
                    l--;
                }
            }
           }

        }

        return res;
    }
};

T.O(N^3)
S.O(k)

Problem statement
There is an integer array ‘A’ of size ‘N’.
Number of inversions in an array can be defined as the number of pairs of ‘i’, ‘j’ such that ‘i’ < ‘j’ and ‘A[i]’ > ‘A[j]’.
You must return the number of inversions in the array.



For example,
Input:
A = [5, 3, 2, 1, 4], N = 5
Output:
7
Explanation: 
The pairs satisfying the condition for inversion are (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), and (3, 4). 
The number of inversions in the array is 7.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
4 3 2 1
Sample Output 1:
6
Explanation Of Sample Input 1:
Input:
A = [4, 3, 2, 1], N = 4
Output:
6
Explanation: 
The pairs satisfying the condition for inversion are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4).    
The number of inversions in the array is 6.
Sample Input 2:
5
1 20 6 4 5
Sample Output 2:
5
Constraints:
1 <= N <= 10^5
1 <= A[i] <= 10^9
Time Limit: 1 sec

Solution:
int merge(vector<int>&arr, int low,int mid, int high) {
    int cnt=0;
    int left=low;
    int right=mid+1;
    vector<int> temp;

    while(left<=mid&&right<=high)
    {
        if(arr[left]<=arr[right])
        {
            temp.push_back(arr[left]);
            left++;
        }
        else
        {
            temp.push_back(arr[right]);
            right++;
            cnt+=(mid-left+1);
        }
    }

    while(left<=mid)
    {
        temp.push_back(arr[left]);
        left++;
    }

    while(right<=high)
    {
        temp.push_back(arr[right]);
        right++;
    }

    for(int i=low;i<=high;i++)
    {
        arr[i]=temp[i-low];
    }

    return cnt;
}

int mergesort(vector<int>& arr, int low, int high)
{   
    int mid;
    int cnt=0;
    if(low<high)
    {
        mid=low+(high-low)/2;
        cnt+=mergesort(arr,low,mid);
        cnt+=mergesort(arr,mid+1,high);
        cnt+=merge(arr,low,mid,high);
    }
    return cnt;
}


int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    int count=0;
    count=mergesort(a,0,n-1);
    return count;
}

Explanation for cnt+=(mid-low)+1
When you are merging two sorted halves of the array, the left half (arr[low..mid]) and 
the right half (arr[mid+1..high]) are both sorted individually.

During the merging process, you compare elements from the left half and the right half:
If the element from the left half (arr[left]) is less than or equal to the element from the 
right half (arr[right]), there is no inversion because both halves are sorted, so we simply add 
the element from the left half to the temporary array.

If the element from the right half (arr[right]) is smaller than the element from the left half
(arr[left]), then all remaining elements in the left half (from left to mid) are greater than
arr[right]. This is because the left half is sorted, and all elements in the left half are 
larger than arr[right] (since the left index hasn't moved beyond left yet).

Therefore, when arr[right] < arr[left], the number of inversions is exactly the number of remaining
elements in the left half, which is (mid - left + 1).

This count represents all pairs where arr[left] is greater than arr[right], and the count is updated accordingly.

T.O(nlogn)
S.O(n)

QUESTION:
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and using only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?

SOLUTION:
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //brute force approach
        /*for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j]&&(i!=j))
                {
                    return nums[i];
                }
            }
        }
        return -1;*/

        //Floyd's Tortoise and Hare (Cycle Detection) algorithm
        // Phase 1: Finding the intersection point of the two runners
        int slow = nums[0];
        int fast = nums[0];
        
        do {
            slow = nums[slow]; // Move slow by one step
            fast = nums[nums[fast]]; // Move fast by two steps
        } while (slow != fast); // Continue until they meet

        // Phase 2: Finding the entrance to the cycle (duplicate number)
        slow = nums[0]; // Start slow from the beginning
        while (slow != fast) {
            slow = nums[slow]; // Move both pointers by one step
            fast = nums[fast];
        }

        return slow; // or fast, both will point to the duplicate number
    }
};

T.O(n)
S.O(1)

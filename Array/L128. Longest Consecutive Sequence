Question:
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9

Solution:
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int length=0;
        int maxlength=0;
        map<int,int> elements;  //to record the elements in sorted order
        int prev=0;

        for(int i=0;i<nums.size();i++)
        {
            elements[nums[i]]=1;
        }


        prev=(elements.begin())->first;
        length=elements[prev];
        for(auto i:elements)
        {   
            //cout<<i.first<<" "<<i.second<<endl;
            if(i.first!=(elements.begin())->first)
            {
            if(i.second!=0&&i.first==prev+1)
            {
                length+=i.second;
                i.second=0;
            }
            else
            {   
                maxlength=max(length,maxlength);
                length=1;
            }
            prev=i.first;
            }
            //cout<<length<<endl;
            //cout<<maxlength<<endl<<endl;
        }

        maxlength=max(length,maxlength);
        return maxlength;
    }
};

T.O(N)
S.O(N)

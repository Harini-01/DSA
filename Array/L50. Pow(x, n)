Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-10^4 <= x^n <= 10^4

SOLUTION:
Approach 1:
class Solution {
public:
    double myPow(double x, int nn) {
        int reciprocal=0;
        double res=1;
        long n=nn;
        if(x==1||x==0)
        {
            return x;
        }

        if(x==-1)
        {
            if(n%2==0)
            {
                return abs(x);
            }
            else{
                return x;
            }
        }

        if(n<=-2147483647)
        return 0;

        
        if(n<0)
        {
            reciprocal=1;
            n=-n; //to make the power positive
            cout<<n; 
        }


        while(n>=1)
        {
            res=res*x;
            n--;
        }
        if(reciprocal)
        {
            res=1.0/res;
        }
        return res;
        
    }
};
T.O(N)
S.O(1)


Approach 2:Binary Exponentiation
class Solution {
public:
    double myPow(double x, int n) {
        int reci=0;
        double res=1;
        if(n<0)
        {
            n=abs(n);
            reci=1;
        }
        if(n==0)
        {
            return 1;
        }
        if(x==0||x==1)
        {
            return x;
        }
        if(x==-1)
        {
            if(n%2==0)
            {
                return 1;
            }
            else
            {
                return -1;
            }
        }


        while(n>0)
        {
            if(n%2==0)
            {
                x=x*x;
                n=n/2;
            }
            else
            {
                res=res*x;
                n=n-1;
            }
        }

        if(reci)
        {
            return 1/res;
        }
        else
        {
            return res;
        }
    }
};

T.O(logN)
S.O(1)

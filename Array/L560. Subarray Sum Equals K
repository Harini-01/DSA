Question:
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

Solution:

Approach 1:
Brute force

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int cnt=0;
        int sum=0;

        for(int i=0;i<nums.size();i++)
        {   sum=0;
            for(int j=i;j<nums.size();j++)
            {   
                
                sum+=nums[j];
                if(sum==k)
                {
                    cnt++;
                    
                }
                
            }
        }

        return cnt;

    }
};

T.O(N^2)
S.O(1)

Approach 2:
Using prefix sum
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> umap;
        int sum=0;
        int cnt=0;
        umap[0]=1;

        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            int val=sum-k;
            if(umap.find(val)!=umap.end())
            {
                cnt+=umap[val];
            }
            umap[sum]++;
        }

        return cnt;
    }
};

T.O(N)
S.O(N)

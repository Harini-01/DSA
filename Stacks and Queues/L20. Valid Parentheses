/*PROBLEM
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
*/

SOLUTION:
class Solution {
public:
    bool isValid(string s) {
        int len=s.size();

    stack<int> st;

    if(s[0]==')'||s[0]==']'||s[0]=='}')    //Condition when the string starts with a closing bracket
        return false;

    for(int i=0;i<len;i++)
    {
        if(s[i]=='('||s[i]=='['||s[i]=='{')
        {
            st.push(s[i]);
        }
        else
        {   
            if(st.empty())     //Condition when the start is a closing braces in mid of string like ()[]}{
            return false;  

            if(s[i]==')'&&st.top()=='(')
                st.pop();
            else if(s[i]==']'&&st.top()=='[')
                st.pop();
            else if(s[i]=='}'&&st.top()=='{')
                st.pop();
            else
                return false;  //When the opening and the closing brackets are not matching
                        
        }
    }

    if(!st.size())  //if stack is empty at the end
    {
        return true;
    }
    else
    {
        return false;
    }
    }
};

Question:
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes
is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
 

Constraints:

The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000
 

Follow-up: Can you solve the problem in O(1) extra memory space?

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverselist(ListNode* head){
        
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* next=NULL;

        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }

        return prev;
    }

    ListNode* getknodes(ListNode*  head,int k)
    {   
        ListNode* itr=head;
        while(k>1&&itr!=NULL)
        {
            itr=itr->next;
            k--;
        }

        if(k==1)
        {
            return itr;
        }
        else
        {
            return NULL;
        }
    }

    ListNode* reverseKGroup(ListNode* head, int k) {
      ListNode* temp=head;
      ListNode* dummy=new ListNode(0);
      dummy->next=head;
      ListNode* prevgrouphead=dummy;
      ListNode* grouphead=NULL;
        ListNode* nextgrouphead=NULL;

      while(temp!=NULL)
      { grouphead=temp;
        ListNode* itr=getknodes(temp,k);
        if(itr!=NULL){
            nextgrouphead=itr->next;
            itr->next=NULL;
            ListNode* reversehead=reverselist(grouphead);
            
            prevgrouphead->next=reversehead;
            grouphead->next=nextgrouphead;

            prevgrouphead=grouphead;
            temp=nextgrouphead;
        }
        else{
            break;
        }       
      }
      return dummy->next;
    }
};

S.C.O(1)
T.C.O(N)

Question:
Given the head of a singly linked list, return true if it is a palindrome or false otherwise.


Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false
 
Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
 
Follow up: Could you do it in O(n) time and O(1) space?

Solution:

Approach 1: Use stack to store the elements of the first half of LL and compare it with the second half.
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* fast=head;
        ListNode* slow=head;
        stack<int> st;
        
        while(fast!=NULL&&fast->next!=NULL)
        {
            st.push(slow->val);
            slow=slow->next;
            fast=fast->next->next;
        }

        if (fast != NULL) { // Odd number of elements, skip the middle node
            slow = slow->next;
        }

        int temp=0;
        while(slow!=NULL)
        {
            temp=st.top();
            st.pop();
            if(temp!=slow->val)
            {
                return false;
            }
            slow=slow->next;
        }
        return true;
    }
};

S.C. O(N)
T.C. O(N)

Approach 2: Reverse the second half of the list and compare it with the first half
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* revhead;

        while(fast!=NULL&&fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        if(fast==NULL)
        {
            revhead=slow;
        }
        else
        {
            revhead=slow->next;
        }

        //Reverse the second half of LL
        ListNode* curr=revhead;
        ListNode* prev=NULL;
        ListNode* next=NULL;

        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }

        //Now prev points to the head of the reversed list

        while(head!=NULL&&prev!=NULL)
        {
            if(head->val!=prev->val)
            {
                return false;
            }
            head=head->next;
            prev=prev->next;
        }

        return true;
    }
};

S.C.O(1)
T.C.O(N)

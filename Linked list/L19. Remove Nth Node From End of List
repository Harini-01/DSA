Question:
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int len=1;
        ListNode* itr=head;
        
        while(itr->next!=NULL)
        {
            len++;
            itr=itr->next;
        }

        int todel=len-n;
        itr=head;
        ListNode* prev=head;

        if(len==1)
        {
            head=NULL;
            return head;
        }

        if(todel==0)
        {
            head=head->next;
            return head;
        }

        while(todel>0&&itr!=NULL)
        {   
            prev=itr;
            itr=itr->next;
            todel--;
        }

        prev->next=itr->next;

        return head;
    }
};

S.C. O(L) where L->length of list
T.C. O(1)

Follow up:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummy=new ListNode(-1);
        dummy->next=head;
        ListNode* fast=dummy;
        ListNode* slow=dummy;
        int i=0;

        while(i<n+1)
        {
            fast=fast->next;
            i++;
        } 

        while(fast!=NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }

        slow->next=slow->next->next;

        return dummy->next;
    }
};

T.C: O(N)+O(L-N) => O(L)
S.C: O(1)

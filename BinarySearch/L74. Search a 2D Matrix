/*You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-10^4 <= matrix[i][j], target <= 10^4*/

SOLUTION:

APPROACH:
Binary search to find the row in which element is preset. Then binary search in that row.


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();

        int low=0,high=m-1;
        int ub=0;
        while(high>=low)
        {
            int mid=(high+low)/2;

            if(matrix[mid][0]<=target&&target<=matrix[mid][n-1])
            {
                ub=mid;
                break;
            }
            else if(target>matrix[mid][n-1])
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }

        if(high<low)
        {
            return false;
        }

        low=0;
        high=n-1;
        while(high>=low)
        {   
            int mid=(high+low)/2;
            if(matrix[ub][mid]==target)
            {
                return true;
            }
            else if(matrix[ub][mid]<=target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return false;
    }
};

2nd time attempted the problem: (Beats: 100% of users)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int low=0;
        int high=matrix.size()-1;
        int mid;

        int row=-1;
        //binary search to find row
        while(high>low)
        {   int mid=low+(high-low)/2;
            if(matrix[mid][0]==target)
            {
                return true;
            }
            if(matrix[mid][0]<target)
            {
                if(matrix[mid+1][0]<=target)
                {
                    low=mid+1;
                }
                else{
                    row=mid;
                    break;
                }
            }
            else{
                high=mid-1;
            }
        }
        if(high==low)
        {
            row=low;
        }

        cout<<row;

        //binary search to find element in row
        if(row!=-1)
        {
            low=0;
            high=matrix[row].size()-1;
            
            while(low<=high)
            {   mid=low+(high-low)/2;
                if(matrix[row][mid]==target)
                {
                    return true;
                }
                else if(matrix[row][mid]<target)
                {
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return false;
    }
};

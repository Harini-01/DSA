/*Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
 

Example 1:

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
 

Constraints:

0 <= x <= 2^31 - 1*/

SOLUTION:
1.
class Solution {
public:
    int mySqrt(int x) {
        int low=0,high=x;
        int num=0;

        while(high>=low)
        {   
            long mid=(high+low)/2;
            if(mid*mid<=x)
            {
                num=mid;
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return num;
    }
};  

2.Optimized memory
class Solution {
public:
    int mySqrt(int x) {
        int low=0,high=x;
        int num=0;

        while(high>=low)
        {   
            long mid=(high+low)/2;
            if(mid*mid==x)
            {
                return mid;
            }
            else if(mid*mid<x)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return low-1;
    }
};
